// Generated by PEG.js v0.11.0-dev.325, https://pegjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "node";
  var peg$c1 = "(";
  var peg$c2 = ")";
  var peg$c3 = "nodeAttr";
  var peg$c4 = ",";
  var peg$c5 = "edge";
  var peg$c6 = "groupAttr";
  var peg$c7 = "edgeAttr";
  var peg$c8 = "((";
  var peg$c9 = "),";
  var peg$c10 = "nodeDefault";
  var peg$c11 = "edgeDefault";
  var peg$c12 = "layout";
  var peg$c13 = "physics";
  var peg$c14 = "interaction";
  var peg$c15 = "true";
  var peg$c16 = "false";
  var peg$c17 = "null";
  var peg$c18 = "\"";
  var peg$c19 = "-";
  var peg$c20 = ".";
  var peg$c21 = "\\\"";
  var peg$c22 = "\r";
  var peg$c23 = "\n";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[^"]/;
  var peg$r2 = /^[_a-z]/i;
  var peg$r3 = /^[_a-z0-9\-]/i;
  var peg$r4 = /^[\x80-\uFFFF]/;
  var peg$r5 = /^[ \t]/;
  var peg$r6 = /^[ \t\r\n\f]/;

  var peg$e0 = peg$literalExpectation("node", false);
  var peg$e1 = peg$literalExpectation("(", false);
  var peg$e2 = peg$literalExpectation(")", false);
  var peg$e3 = peg$literalExpectation("nodeAttr", false);
  var peg$e4 = peg$literalExpectation(",", false);
  var peg$e5 = peg$literalExpectation("edge", false);
  var peg$e6 = peg$literalExpectation("groupAttr", false);
  var peg$e7 = peg$literalExpectation("edgeAttr", false);
  var peg$e8 = peg$literalExpectation("((", false);
  var peg$e9 = peg$literalExpectation("),", false);
  var peg$e10 = peg$literalExpectation("nodeDefault", false);
  var peg$e11 = peg$literalExpectation("edgeDefault", false);
  var peg$e12 = peg$literalExpectation("layout", false);
  var peg$e13 = peg$literalExpectation("physics", false);
  var peg$e14 = peg$literalExpectation("interaction", false);
  var peg$e15 = peg$literalExpectation("true", false);
  var peg$e16 = peg$literalExpectation("false", false);
  var peg$e17 = peg$literalExpectation("null", false);
  var peg$e18 = peg$otherExpectation("double quoted string");
  var peg$e19 = peg$otherExpectation("number");
  var peg$e20 = peg$otherExpectation("entity identifier");
  var peg$e21 = peg$otherExpectation("predicate identifier");
  var peg$e22 = peg$literalExpectation("\r", false);
  var peg$e23 = peg$literalExpectation("\n", false);
  var peg$e24 = peg$otherExpectation("tab or space");

  var peg$f0 = function(terms) { return global; };
  var peg$f1 = function(first, rest) { return buildList(first, rest, 1); };
  var peg$f2 = function(predicateName, id) { ensureEntity('nodes', id); };
  var peg$f3 = function(predicateName, id, rest) {
      ensureEntity('nodes', id);
      if(rest.length < 2) { return; }
      setDeep(global.nodes[id], rest.slice(0, -1), rest[rest.length-1]);
    };
  var peg$f4 = function(predicateName, node1, node2) {
      ensureEntity('nodes', node1);
      ensureEntity('nodes', node2);
      var id = String(node1) + '%' + String(node2);
      ensureEntity('edges', id);
      global.edges[id].from = node1;
      global.edges[id].to = node2;
    };
  var peg$f5 = function(predicateName, id, node1, node2) {
      ensureEntity('nodes', node1);
      ensureEntity('nodes', node2);
      ensureEntity('edges', id);
      global.edges[id].from = node1;
      global.edges[id].to = node2;
    };
  var peg$f6 = function(predicateName, id, rest) {
      ensure('groups');
      global.groups[id] = global.groups[id] || {};
      setDeep(global.groups[id], rest.slice(0, -1), rest[rest.length-1]);
    };
  var peg$f7 = function(predicateName, node1, node2, rest) {
      var id = String(node1) + '%' + String(node2);
      ensureEntity('edges', id);
      if(rest.length < 2) { return; }
      setDeep(global.edges[id], rest.slice(0, -1), rest[rest.length-1]);
    };
  var peg$f8 = function(predicateName, id, rest) {
      ensureEntity('edges', id);
      //setAttr(global.edges[id], rest);
      if(rest.length < 2) { return; }
      setDeep(global.edges[id], rest.slice(0, -1), rest[rest.length-1]);
    };
  var peg$f9 = function(predicateName, rest) {
      if(rest.length < 2) { return; }
      ensure('nodeDefaults');
      setAttr(global.nodeDefaults, rest);
    };
  var peg$f10 = function(predicateName, rest) {
      if(rest.length < 2) { return; }
      ensure('edgeDefaults');
      setAttr(global.edgeDefaults, rest);
    };
  var peg$f11 = function(predicateName, rest) {
      if(rest.length < 2) { return; }
      ensure('layout');
      setAttr(global.layout, rest);
    };
  var peg$f12 = function(predicateName, rest) {
      if(rest.length < 2) { return; }
      ensure('physics');
      setAttr(global.physics, rest);
    };
  var peg$f13 = function(predicateName, rest) {
      if(rest.length < 2) { return; }
      ensure('interaction');
      setAttr(global.interaction, rest);
    };
  var peg$f14 = function(first, rest) {
      return buildList(first, rest, 1);
    };
  var peg$f15 = function(predicateName, inside) { };
  var peg$f16 = function(first, rest) {
      return buildList(first, rest, 2);
    };
  var peg$f17 = function() { return true; };
  var peg$f18 = function() { return false; };
  var peg$f19 = function() { return null; };
  var peg$f20 = function(str) { return str; };
  var peg$f21 = function(digits) { return makeInteger(digits); };
  var peg$f22 = function(sign, digits) { var d = makeInteger(digits); return (sign === '-') ? -d : d };
  var peg$f23 = function(sign, float) {
      var f = parseFloat(float);
      return (sign === '-') ? -f : f;
    };
  var peg$f24 = function(str) { return str.join("") };
  var peg$f25 = function(prefix, start, chars) {
        return prefix + start + chars.join("");
      };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsestart() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseterms();
    s2 = peg$parseNl();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f0(s1);

    return s0;
  }

  function peg$parseterms() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseE();
    }
    s2 = peg$parseterm();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = peg$currPos;
    s5 = [];
    s6 = peg$parseE();
    if (s6 !== peg$FAILED) {
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseE();
      }
    } else {
      s5 = peg$FAILED;
    }
    if (s5 !== peg$FAILED) {
      s6 = peg$parseterm();
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseE();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseterm();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    }
    s4 = [];
    s5 = peg$parseE();
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$parseE();
    }
    peg$savedPos = s0;
    s0 = peg$f1(s2, s3);

    return s0;
  }

  function peg$parseterm() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseentityNode();
    if (s0 === peg$FAILED) {
      s0 = peg$parseattrNode();
      if (s0 === peg$FAILED) {
        s0 = peg$parseentityEdge2();
        if (s0 === peg$FAILED) {
          s0 = peg$parseattrEdge2();
          if (s0 === peg$FAILED) {
            s0 = peg$parseentityEdge3();
            if (s0 === peg$FAILED) {
              s0 = peg$parseattrEdge3();
              if (s0 === peg$FAILED) {
                s0 = peg$parseattrGroup();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseattrNodeDefault();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseattrEdgeDefault();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseattrLayout();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseattrPhysics();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseattrInteraction();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsepredicate();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsebooleanAtom();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsepredicateIdent();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsenumber();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseaspstring();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseentityNode() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e0);
    if (input.substr(peg$currPos, 4) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f2(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrNode() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e3);
    if (input.substr(peg$currPos, 8) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepathAndValue();
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e2);
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f3(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityEdge2() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e5);
    if (input.substr(peg$currPos, 4) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseentityIdent();
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e2);
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f4(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseentityEdge3() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e5);
    if (input.substr(peg$currPos, 4) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseentityIdent();
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e4);
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c4;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseentityIdent();
                if (s7 !== peg$FAILED) {
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c2;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f5(s1, s3, s5, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrGroup() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e6);
    if (input.substr(peg$currPos, 9) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepathAndValue();
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e2);
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrEdge2() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e7);
    if (input.substr(peg$currPos, 8) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e8);
      if (input.substr(peg$currPos, 2) === peg$c8) {
        s2 = peg$c8;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseentityIdent();
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e9);
              if (input.substr(peg$currPos, 2) === peg$c9) {
                s6 = peg$c9;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsepathAndValue();
                if (s7 !== peg$FAILED) {
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c2;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f7(s1, s3, s5, s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrEdge3() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e7);
    if (input.substr(peg$currPos, 8) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseentityIdent();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c4;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsepathAndValue();
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e2);
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f8(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrNodeDefault() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e10);
    if (input.substr(peg$currPos, 11) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepathAndValue();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrEdgeDefault() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e11);
    if (input.substr(peg$currPos, 11) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepathAndValue();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f10(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrLayout() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e12);
    if (input.substr(peg$currPos, 6) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepathAndValue();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrPhysics() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e13);
    if (input.substr(peg$currPos, 7) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepathAndValue();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f12(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrInteraction() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e14);
    if (input.substr(peg$currPos, 11) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsepathAndValue();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f13(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepathAndValue() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsesinglePathOrValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e4);
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c4;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsesinglePathOrValue();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e4);
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c4;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesinglePathOrValue();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f14(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesinglePathOrValue() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsebooleanAtom();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenullAtom();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinsideFunction();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepredicateIdent();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumber();
            if (s0 === peg$FAILED) {
              s0 = peg$parseaspstring();
              if (s0 === peg$FAILED) {
                s0 = peg$parseanontuple();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepredicate() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsepredicateIdent();
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearguments();
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinsideFunction() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsepredicateIdent();
    if (s2 !== peg$FAILED) {
      rule$expects(peg$e1);
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c1;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsearguments();
        if (s4 !== peg$FAILED) {
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c2;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsearguments() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseargument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      rule$expects(peg$e4);
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c4;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseE();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
        s6 = peg$parseargument();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        rule$expects(peg$e4);
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c4;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseE();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseE();
          }
          s6 = peg$parseargument();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseargument() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsepredicate();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebooleanAtom();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepredicateIdent();
        if (s0 === peg$FAILED) {
          s0 = peg$parseanontuple();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumber();
            if (s0 === peg$FAILED) {
              s0 = peg$parseaspstring();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseanontuple() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e1);
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseE();
      }
      s3 = peg$parseargument();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        rule$expects(peg$e4);
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c4;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseE();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseE();
          }
          s8 = peg$parseargument();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c4;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseE();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseE();
            }
            s8 = peg$parseargument();
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = [];
        s6 = peg$parseE();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
        rule$expects(peg$e2);
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c2;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebooleanAtom() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e15);
    if (input.substr(peg$currPos, 4) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e16);
      if (input.substr(peg$currPos, 5) === peg$c16) {
        s1 = peg$c16;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f18();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenullAtom() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e17);
    if (input.substr(peg$currPos, 4) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseaspstring() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e18);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestring();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f20(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseposinteger() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f22(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedecimal() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c19;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c20;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          if (peg$r0.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (peg$r0.test(input.charAt(peg$currPos))) {
                s8 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
              }
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s5 = [s5, s6, s7];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e19);
    peg$silentFails++;
    s0 = peg$parsedecimal();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinteger();
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseentityIdent() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e20);
    peg$silentFails++;
    s0 = peg$parseinteger();
    if (s0 === peg$FAILED) {
      s0 = peg$parseaspstring();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepredicateIdent();
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsestringchar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsestringchar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestringchar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.substr(peg$currPos, 2) === peg$c21) {
      s0 = peg$c21;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsepredicateIdent() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e21);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c19;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parsepredicateIdentStart();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsepredicateIdentChar();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsepredicateIdentChar();
      }
      peg$savedPos = s0;
      s0 = peg$f25(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsepredicateIdentStart() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenonascii();
    }

    return s0;
  }

  function peg$parsepredicateIdentChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r3.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenonascii();
    }

    return s0;
  }

  function peg$parsenonascii() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNl() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e22);
    if (input.charCodeAt(peg$currPos) === 13) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    rule$expects(peg$e23);
    if (input.charCodeAt(peg$currPos) === 10) {
      s2 = peg$c23;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseE() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e24);
    peg$silentFails++;
    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseS() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }


    // TODO: think about Object.observe
    var global = global || {nodes: {}, edges: {}};

    function makeInteger(o) {
      return parseInt(o.join(""), 10);
    }

    function extractList(list, index) {
      var result = [], i;

      for (i = 0; i < list.length; i++) {
        //if (list[i][index] !== null) {
          result.push(list[i][index]);
        //}
      }

      return result;
    }

    function buildList(first, rest, index) {
      return (first !== null ? [first] : []).concat(extractList(rest, index));
    }

    function ensure(key) {
      global[key] = global[key] || {};
    }

    function ensureEntity(entity, identity) {
      global[entity][identity] = global[entity][identity] || {id: identity};
    }

    function setDeep(objParam, arr, value) {
      var obj = objParam;
      for (var i = 0, n = arr.length-1; i < n; ++i) {
          var key = arr[i];
          // simpler
          obj[key] = obj[key] || {};
          obj = obj[key];
          /*if (key in obj) {
              obj = obj[key];
          } else {
              return;
          }*/
      }
      obj[arr[arr.length-1]] = value;
      return obj;
    }

    function setAttr(obj, lst) {
      if(lst.length < 2) { return; } // need both path and value
      setDeep(obj, lst.slice(0, -1), lst[lst.length-1]);
    }


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
