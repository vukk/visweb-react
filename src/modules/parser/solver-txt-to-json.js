// Generated by PEG.js v0.11.0-dev.325, https://pegjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "clasp";
  var peg$c1 = "clingo";
  var peg$c2 = " version";
  var peg$c3 = " version ";
  var peg$c4 = "Reading from ";
  var peg$c5 = " ...";
  var peg$c6 = "SATISFIABLE";
  var peg$c7 = "UNSATISFIABLE";
  var peg$c8 = "UNKNOWN";
  var peg$c9 = "OPTIMUM FOUND";
  var peg$c10 = "Models";
  var peg$c11 = ":";
  var peg$c12 = "+";
  var peg$c13 = "Optimum";
  var peg$c14 = "yes";
  var peg$c15 = "no";
  var peg$c16 = "Optimization";
  var peg$c17 = " ";
  var peg$c18 = "Calls";
  var peg$c19 = "Time";
  var peg$c20 = "s";
  var peg$c21 = "(";
  var peg$c22 = "Solving:";
  var peg$c23 = "1st Model:";
  var peg$c24 = "Unsat:";
  var peg$c25 = ")";
  var peg$c26 = "CPU Time";
  var peg$c27 = "Solving...";
  var peg$c28 = "Optimization: ";
  var peg$c29 = "Answer: ";
  var peg$c30 = ",";
  var peg$c31 = "true";
  var peg$c32 = "false";
  var peg$c33 = "\"";
  var peg$c34 = "-";
  var peg$c35 = ".";
  var peg$c36 = "\\\"";
  var peg$c37 = "\r";
  var peg$c38 = "\n";

  var peg$r0 = /^[^\r\n]/;
  var peg$r1 = /^[a-z0-9._\-()\t $:]/i;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[^"]/;
  var peg$r4 = /^[_a-z]/i;
  var peg$r5 = /^[_a-z0-9\-]/i;
  var peg$r6 = /^[\x80-\uFFFF]/;
  var peg$r7 = /^[ \t]/;
  var peg$r8 = /^[ \t\r\n\f]/;
  var peg$r9 = /^[A-Za-z0-9\-_.\\\/]/;

  var peg$e0 = peg$literalExpectation("clasp", false);
  var peg$e1 = peg$literalExpectation("clingo", false);
  var peg$e2 = peg$literalExpectation(" version", false);
  var peg$e3 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e4 = peg$literalExpectation(" version ", false);
  var peg$e5 = peg$classExpectation([["a", "z"], ["0", "9"], ".", "_", "-", "(", ")", "\t", " ", "$", ":"], false, true);
  var peg$e6 = peg$literalExpectation("Reading from ", false);
  var peg$e7 = peg$literalExpectation(" ...", false);
  var peg$e8 = peg$literalExpectation("SATISFIABLE", false);
  var peg$e9 = peg$literalExpectation("UNSATISFIABLE", false);
  var peg$e10 = peg$literalExpectation("UNKNOWN", false);
  var peg$e11 = peg$literalExpectation("OPTIMUM FOUND", false);
  var peg$e12 = peg$literalExpectation("Models", false);
  var peg$e13 = peg$literalExpectation(":", false);
  var peg$e14 = peg$literalExpectation("+", false);
  var peg$e15 = peg$otherExpectation("result optimum yes/no line");
  var peg$e16 = peg$otherExpectation("models result optimization line");
  var peg$e17 = peg$otherExpectation("final amount of calls");
  var peg$e18 = peg$literalExpectation("Time", false);
  var peg$e19 = peg$literalExpectation("s", false);
  var peg$e20 = peg$literalExpectation("(", false);
  var peg$e21 = peg$literalExpectation("Solving:", false);
  var peg$e22 = peg$literalExpectation("1st Model:", false);
  var peg$e23 = peg$literalExpectation("Unsat:", false);
  var peg$e24 = peg$literalExpectation(")", false);
  var peg$e25 = peg$literalExpectation("CPU Time", false);
  var peg$e26 = peg$otherExpectation("Solving...");
  var peg$e27 = peg$otherExpectation("answer optimization line");
  var peg$e28 = peg$otherExpectation("answer number line");
  var peg$e29 = peg$otherExpectation("predicate");
  var peg$e30 = peg$literalExpectation("true", false);
  var peg$e31 = peg$literalExpectation("false", false);
  var peg$e32 = peg$otherExpectation("double quoted string");
  var peg$e33 = peg$otherExpectation("positive integer");
  var peg$e34 = peg$otherExpectation("positive decimal number");
  var peg$e35 = peg$otherExpectation("number");
  var peg$e36 = peg$otherExpectation("predicate identifier");
  var peg$e37 = peg$literalExpectation("\r", false);
  var peg$e38 = peg$literalExpectation("\n", false);
  var peg$e39 = peg$otherExpectation("tab or space");
  var peg$e40 = peg$otherExpectation("file path");

  var peg$f0 = function(implemented) { return implemented; };
  var peg$f1 = function(sl, il, calls, result, modelsmeta, numcalls, timemeta) {
      var m = {
        Solver: sl,
        Input: il
      };
      // clingo will say there is one call if there are none TODO: fix if fixed upstream in clingo
      m['Call'] = (calls.length === 0) ? [{}] : calls;
      m['Result'] = result;
      m['Models'] = modelsmeta;
      m['Calls'] = numcalls;
      m['Time'] = timemeta;
      return m;
    };
  var peg$f2 = function(solver, txt, ver) { return solver + txt + ver.join(''); };
  var peg$f3 = function(fp) { return [fp]; };
  var peg$f4 = function(result) { return result; };
  var peg$f5 = function(num, more, opt, costs) {
      var m = {
        Number: num,
        More: (more === null) ? "no" : "yes"
      };
      if(opt !== null) { m['Optimum'] = opt; m['Optimal'] = 1; } // TODO fix 'Optimal'
      if(opt !== null) m['Costs'] = costs;
      return m;
    };
  var peg$f6 = function(opt) { return opt; };
  var peg$f7 = function(first, rest) { return buildList(first, rest, 1) };
  var peg$f8 = function(num) { return num; };
  var peg$f9 = function(total, solving, model, unsat, cpu) {
      return {
        Total: total,
        Solve: solving,
        Model: model,
        Unsat: unsat,
        CPU: cpu
      }
    };
  var peg$f10 = function(models) { return { Witnesses: models }; };
  var peg$f11 = function(anl, al, ol) {
      var m = {};
      m['Value'] = al;
      if(ol !== null) m['Costs'] = ol;
      return m;
    };
  var peg$f12 = function(ol) { return ol; };
  var peg$f13 = function(first, rest) { return buildList(first, rest, 1); };
  var peg$f14 = function(first, rest) {
      return buildList(first, rest, 2);
    };
  var peg$f15 = function() { return true; };
  var peg$f16 = function() { return false; };
  var peg$f17 = function(str) { return str; };
  var peg$f18 = function(digits) { return makeInteger(digits); };
  var peg$f19 = function(sign, digits) { var d = makeInteger(digits); return (sign === '-') ? -d : d };
  var peg$f20 = function(float) { return parseFloat(float); };
  var peg$f21 = function(sign, float) {
      var f = parseFloat(float);
      return (sign === '-') ? -f : f;
    };
  var peg$f22 = function(str) { return str.join("") };
  var peg$f23 = function(prefix, start, chars) {
        return prefix + start + chars.join("");
      };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$begin();
    s4 = peg$currPos;
    rule$expects(peg$e0);
    if (input.substr(peg$currPos, 5) === peg$c0) {
      s5 = peg$c0;
      peg$currPos += 5;
    } else {
      s5 = peg$FAILED;
    }
    if (s5 === peg$FAILED) {
      rule$expects(peg$e1);
      if (input.substr(peg$currPos, 6) === peg$c1) {
        s5 = peg$c1;
        peg$currPos += 6;
      } else {
        s5 = peg$FAILED;
      }
    }
    if (s5 !== peg$FAILED) {
      rule$expects(peg$e2);
      if (input.substr(peg$currPos, 8) === peg$c2) {
        s6 = peg$c2;
        peg$currPos += 8;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    peg$end(true);
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseanylinenl();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$begin();
      s4 = peg$currPos;
      rule$expects(peg$e0);
      if (input.substr(peg$currPos, 5) === peg$c0) {
        s5 = peg$c0;
        peg$currPos += 5;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        rule$expects(peg$e1);
        if (input.substr(peg$currPos, 6) === peg$c1) {
          s5 = peg$c1;
          peg$currPos += 6;
        } else {
          s5 = peg$FAILED;
        }
      }
      if (s5 !== peg$FAILED) {
        rule$expects(peg$e2);
        if (input.substr(peg$currPos, 8) === peg$c2) {
          s6 = peg$c2;
          peg$currPos += 8;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      peg$end(true);
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseanylinenl();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parseimplemented();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseanylinenl();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseanylinenl();
      }
      s4 = peg$parseanyline();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseanyline() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    rule$expects(peg$e3);
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      rule$expects(peg$e3);
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseanylinenl() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseanyline();
    s2 = peg$parseNl();
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseimplemented() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsesolververline();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinputline();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecalls();
        s4 = peg$parseresultline();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemodelsmeta();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecallsmeta();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetimemeta();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f1(s1, s2, s3, s4, s5, s6, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesolververline() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e1);
    if (input.substr(peg$currPos, 6) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      rule$expects(peg$e0);
      if (input.substr(peg$currPos, 5) === peg$c0) {
        s1 = peg$c0;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e4);
      if (input.substr(peg$currPos, 9) === peg$c3) {
        s2 = peg$c3;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        rule$expects(peg$e5);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            rule$expects(peg$e5);
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseNl();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f2(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinputline() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e6);
    if (input.substr(peg$currPos, 13) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefilepath();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e7);
        if (input.substr(peg$currPos, 4) === peg$c5) {
          s3 = peg$c5;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseNl();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresultline() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseresult();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseNl();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseresult() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e8);
    if (input.substr(peg$currPos, 11) === peg$c6) {
      s0 = peg$c6;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      rule$expects(peg$e9);
      if (input.substr(peg$currPos, 13) === peg$c7) {
        s0 = peg$c7;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        rule$expects(peg$e10);
        if (input.substr(peg$currPos, 7) === peg$c8) {
          s0 = peg$c8;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          rule$expects(peg$e11);
          if (input.substr(peg$currPos, 13) === peg$c9) {
            s0 = peg$c9;
            peg$currPos += 13;
          } else {
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemodelsmeta() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e12);
    if (input.substr(peg$currPos, 6) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseE();
      }
      rule$expects(peg$e13);
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseE();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseE();
        }
        s5 = peg$parseposinteger();
        if (s5 !== peg$FAILED) {
          rule$expects(peg$e14);
          if (input.charCodeAt(peg$currPos) === 43) {
            s6 = peg$c12;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = [];
          s8 = peg$parseE();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseE();
          }
          s8 = peg$parseNl();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsemetaoptimumlinenl();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parsemetaoptimizationlinenl();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f5(s5, s6, s9, s10);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemetaoptimumlinenl() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e15);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseE();
    }
    if (input.substr(peg$currPos, 7) === peg$c13) {
      s2 = peg$c13;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseE();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseE();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c11;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseE();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
        if (input.substr(peg$currPos, 3) === peg$c14) {
          s6 = peg$c14;
          peg$currPos += 3;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c15) {
            s6 = peg$c15;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
          }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseNl();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsemetaoptimizationlinenl() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e16);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseE();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseE();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseE();
        }
        s5 = peg$parseinteger();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s8 = peg$c17;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parseinteger();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 32) {
              s8 = peg$c17;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseinteger();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s7 = peg$parseNl();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsecallsmeta() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e17);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseE();
      }
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseE();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseE();
        }
        s5 = peg$parseposinteger();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseNl();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f8(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsetimemeta() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e18);
    if (input.substr(peg$currPos, 4) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseE();
      }
      rule$expects(peg$e13);
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c11;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseE();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseE();
        }
        s5 = peg$parsetimedecimal();
        if (s5 !== peg$FAILED) {
          rule$expects(peg$e19);
          if (input.charCodeAt(peg$currPos) === 115) {
            s6 = peg$c20;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseE();
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseE();
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              rule$expects(peg$e20);
              if (input.charCodeAt(peg$currPos) === 40) {
                s8 = peg$c21;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parseE();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parseE();
                }
                rule$expects(peg$e21);
                if (input.substr(peg$currPos, 8) === peg$c22) {
                  s10 = peg$c22;
                  peg$currPos += 8;
                } else {
                  s10 = peg$FAILED;
                }
                if (s10 !== peg$FAILED) {
                  s11 = [];
                  s12 = peg$parseE();
                  if (s12 !== peg$FAILED) {
                    while (s12 !== peg$FAILED) {
                      s11.push(s12);
                      s12 = peg$parseE();
                    }
                  } else {
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsetimedecimal();
                    if (s12 !== peg$FAILED) {
                      rule$expects(peg$e19);
                      if (input.charCodeAt(peg$currPos) === 115) {
                        s13 = peg$c20;
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = [];
                        s15 = peg$parseE();
                        if (s15 !== peg$FAILED) {
                          while (s15 !== peg$FAILED) {
                            s14.push(s15);
                            s15 = peg$parseE();
                          }
                        } else {
                          s14 = peg$FAILED;
                        }
                        if (s14 !== peg$FAILED) {
                          rule$expects(peg$e22);
                          if (input.substr(peg$currPos, 10) === peg$c23) {
                            s15 = peg$c23;
                            peg$currPos += 10;
                          } else {
                            s15 = peg$FAILED;
                          }
                          if (s15 !== peg$FAILED) {
                            s16 = [];
                            s17 = peg$parseE();
                            if (s17 !== peg$FAILED) {
                              while (s17 !== peg$FAILED) {
                                s16.push(s17);
                                s17 = peg$parseE();
                              }
                            } else {
                              s16 = peg$FAILED;
                            }
                            if (s16 !== peg$FAILED) {
                              s17 = peg$parsetimedecimal();
                              if (s17 !== peg$FAILED) {
                                rule$expects(peg$e19);
                                if (input.charCodeAt(peg$currPos) === 115) {
                                  s18 = peg$c20;
                                  peg$currPos++;
                                } else {
                                  s18 = peg$FAILED;
                                }
                                if (s18 !== peg$FAILED) {
                                  s19 = [];
                                  s20 = peg$parseE();
                                  if (s20 !== peg$FAILED) {
                                    while (s20 !== peg$FAILED) {
                                      s19.push(s20);
                                      s20 = peg$parseE();
                                    }
                                  } else {
                                    s19 = peg$FAILED;
                                  }
                                  if (s19 !== peg$FAILED) {
                                    rule$expects(peg$e23);
                                    if (input.substr(peg$currPos, 6) === peg$c24) {
                                      s20 = peg$c24;
                                      peg$currPos += 6;
                                    } else {
                                      s20 = peg$FAILED;
                                    }
                                    if (s20 !== peg$FAILED) {
                                      s21 = [];
                                      s22 = peg$parseE();
                                      if (s22 !== peg$FAILED) {
                                        while (s22 !== peg$FAILED) {
                                          s21.push(s22);
                                          s22 = peg$parseE();
                                        }
                                      } else {
                                        s21 = peg$FAILED;
                                      }
                                      if (s21 !== peg$FAILED) {
                                        s22 = peg$parsetimedecimal();
                                        if (s22 !== peg$FAILED) {
                                          rule$expects(peg$e19);
                                          if (input.charCodeAt(peg$currPos) === 115) {
                                            s23 = peg$c20;
                                            peg$currPos++;
                                          } else {
                                            s23 = peg$FAILED;
                                          }
                                          if (s23 !== peg$FAILED) {
                                            s24 = [];
                                            s25 = peg$parseE();
                                            while (s25 !== peg$FAILED) {
                                              s24.push(s25);
                                              s25 = peg$parseE();
                                            }
                                            rule$expects(peg$e24);
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s25 = peg$c25;
                                              peg$currPos++;
                                            } else {
                                              s25 = peg$FAILED;
                                            }
                                            if (s25 !== peg$FAILED) {
                                              s26 = peg$parseNl();
                                              if (s26 !== peg$FAILED) {
                                                rule$expects(peg$e25);
                                                if (input.substr(peg$currPos, 8) === peg$c26) {
                                                  s27 = peg$c26;
                                                  peg$currPos += 8;
                                                } else {
                                                  s27 = peg$FAILED;
                                                }
                                                if (s27 !== peg$FAILED) {
                                                  s28 = [];
                                                  s29 = peg$parseE();
                                                  while (s29 !== peg$FAILED) {
                                                    s28.push(s29);
                                                    s29 = peg$parseE();
                                                  }
                                                  rule$expects(peg$e13);
                                                  if (input.charCodeAt(peg$currPos) === 58) {
                                                    s29 = peg$c11;
                                                    peg$currPos++;
                                                  } else {
                                                    s29 = peg$FAILED;
                                                  }
                                                  if (s29 !== peg$FAILED) {
                                                    s30 = [];
                                                    s31 = peg$parseE();
                                                    while (s31 !== peg$FAILED) {
                                                      s30.push(s31);
                                                      s31 = peg$parseE();
                                                    }
                                                    s31 = peg$parsetimedecimal();
                                                    if (s31 !== peg$FAILED) {
                                                      rule$expects(peg$e19);
                                                      if (input.charCodeAt(peg$currPos) === 115) {
                                                        s32 = peg$c20;
                                                        peg$currPos++;
                                                      } else {
                                                        s32 = peg$FAILED;
                                                      }
                                                      if (s32 !== peg$FAILED) {
                                                        s33 = peg$parseNl();
                                                        if (s33 === peg$FAILED) {
                                                          s33 = null;
                                                        }
                                                        peg$savedPos = s0;
                                                        s0 = peg$f9(s5, s12, s17, s22, s31);
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecalls() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$parsecall();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsecall();
    }

    return s0;
  }

  function peg$parsecall() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsesolvingtextnl();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsemodel();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsemodel();
      }
      peg$savedPos = s0;
      s0 = peg$f10(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesolvingtextnl() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e26);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNl();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsemodel() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseanswernumline();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNl();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseanswersetline();
        s4 = peg$parseNl();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseoptimizationlinenl();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f11(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoptimizationlinenl() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e27);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoptimizationline();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNl();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseoptimizationline() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 32) {
          s5 = peg$c17;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseinteger();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 32) {
            s5 = peg$c17;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseinteger();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f7(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseanswernumline() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e28);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseposinteger();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseanswersetline() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseE();
    }
    s2 = peg$parseterm();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = peg$currPos;
    s5 = [];
    s6 = peg$parseE();
    if (s6 !== peg$FAILED) {
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$parseE();
      }
    } else {
      s5 = peg$FAILED;
    }
    if (s5 !== peg$FAILED) {
      s6 = peg$parseterm();
      if (s6 !== peg$FAILED) {
        s5 = [s5, s6];
        s4 = s5;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$currPos;
      s5 = [];
      s6 = peg$parseE();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseterm();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
    }
    s4 = [];
    s5 = peg$parseE();
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$parseE();
    }
    peg$savedPos = s0;
    s0 = peg$f13(s2, s3);

    return s0;
  }

  function peg$parseterm() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsepredicate();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebooleanAtom();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepredicateIdent();
        if (s0 === peg$FAILED) {
          s0 = peg$parseaspstring();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumber();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepredicate() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e29);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsepredicateIdent();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsearguments();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s5 = peg$c25;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsearguments() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseargument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c30;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parseE();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
        s6 = peg$parseargument();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c30;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseE();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseE();
          }
          s6 = peg$parseargument();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f14(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseargument() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parsepredicate();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebooleanAtom();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepredicateIdent();
        if (s0 === peg$FAILED) {
          s0 = peg$parseanontuple();
          if (s0 === peg$FAILED) {
            s0 = peg$parseaspstring();
            if (s0 === peg$FAILED) {
              s0 = peg$parsenumber();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseanontuple() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseE();
      }
      s3 = peg$parseargument();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c30;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parseE();
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseE();
          }
          s8 = peg$parseargument();
          if (s8 !== peg$FAILED) {
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s6 = peg$c30;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parseE();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseE();
            }
            s8 = peg$parseargument();
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = [];
        s6 = peg$parseE();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parseE();
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s6 = peg$c25;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebooleanAtom() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e30);
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e31);
      if (input.substr(peg$currPos, 5) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f16();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseaspstring() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e32);
    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestring();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseposinteger() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e33);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18(s1);
    }
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f19(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetimedecimal() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e34);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c35;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20(s1);
    }
    s0 = s1;
    peg$silentFails--;

    return s0;
  }

  function peg$parsedecimal() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = peg$currPos;
    s4 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c35;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f21(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e35);
    peg$silentFails++;
    s0 = peg$parsedecimal();
    if (s0 === peg$FAILED) {
      s0 = peg$parseinteger();
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsestringchar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsestringchar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestringchar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (input.substr(peg$currPos, 2) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsepredicateIdent() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e36);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c34;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parsepredicateIdentStart();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsepredicateIdentChar();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsepredicateIdentChar();
      }
      peg$savedPos = s0;
      s0 = peg$f23(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsepredicateIdentStart() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenonascii();
    }

    return s0;
  }

  function peg$parsepredicateIdentChar() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsenonascii();
    }

    return s0;
  }

  function peg$parsenonascii() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNl() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e37);
    if (input.charCodeAt(peg$currPos) === 13) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    rule$expects(peg$e38);
    if (input.charCodeAt(peg$currPos) === 10) {
      s2 = peg$c38;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseE() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e39);
    peg$silentFails++;
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseS() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    if (peg$r8.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilepath() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e40);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;

    return s0;
  }


    function makeInteger(o) {
      return parseInt(o.join(""), 10);
    }

    function extractList(list, index) {
      var result = [], i;

      for (i = 0; i < list.length; i++) {
        if (list[i][index] !== null) {
          result.push(list[i][index]);
        }
      }

      return result;
    }

    function buildList(first, rest, index) {
      return (first !== null ? [first] : []).concat(extractList(rest, index));
    }


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
